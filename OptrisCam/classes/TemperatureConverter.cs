//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Optris.OtcSDK {
///  Converts temperatures in °C to and from their internal SDK representation.

public class TemperatureConverter : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TemperatureConverter(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TemperatureConverter obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(TemperatureConverter obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~TemperatureConverter() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otcsdkPINVOKE.delete_TemperatureConverter(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  ///  Constructor.
  public TemperatureConverter() : this(otcsdkPINVOKE.new_TemperatureConverter__SWIG_0(), true) {
  }

  /// <summary>Constructor.</summary>
  /// <param name="precision"> of the temperature.</param>
  public TemperatureConverter(TemperaturePrecision precision) : this(otcsdkPINVOKE.new_TemperatureConverter__SWIG_1((int)precision), true) {
  }

  /// <summary>Set the temperature precision.</summary>
  /// <param name="precision"> to set.</param>
  public void setPrecision(TemperaturePrecision precision) {
    otcsdkPINVOKE.TemperatureConverter_setPrecision(swigCPtr, (int)precision);
  }

  /// <summary>Returns the temperature precision.</summary>
  /// <returns>temperature precision.</returns>
  public TemperaturePrecision getPrecision() {
    TemperaturePrecision ret = (TemperaturePrecision)otcsdkPINVOKE.TemperatureConverter_getPrecision(swigCPtr);
    return ret;
  }

  /// <summary>Converts an internal value to a temperature in °C.</summary>
  /// <param name="value"> internal value to convert.</param> 
  /// <returns>temperature in °C.</returns>
  public float toTemperature(float value) {
    float ret = otcsdkPINVOKE.TemperatureConverter_toTemperature(swigCPtr, value);
    return ret;
  }

  /// <summary>Converts a temperature in °C to an internal value.</summary>
  /// <param name="temperature"> in °C to convert.</param> 
  /// <returns>internal value.</returns>
  public ushort toValue(float temperature) {
    ushort ret = otcsdkPINVOKE.TemperatureConverter_toValue(swigCPtr, temperature);
    return ret;
  }

  /// <summary>Checks if the given temperature in °C is valid.</summary>
  /// <param name="temperature"> in °C to check.</param> 
  /// <returns>true if the temperature is valid. False otherwise.</returns>
  public bool isTemperatureValid(float temperature) {
    bool ret = otcsdkPINVOKE.TemperatureConverter_isTemperatureValid(swigCPtr, temperature);
    return ret;
  }

  /// <summary>Checks if an internal value is valid.</summary>
  /// <param name="value"> to check.</param> 
  /// <returns>true if the value is valid. False otherwise.</returns>
  public bool isValueValid(ushort value) {
    bool ret = otcsdkPINVOKE.TemperatureConverter_isValueValid(swigCPtr, value);
    return ret;
  }

}

}
