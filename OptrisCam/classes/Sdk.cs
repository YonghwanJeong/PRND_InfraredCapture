//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Optris.OtcSDK {
///  Static class granting access to SDK wide configuration and utility functions.

public class Sdk : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Sdk(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Sdk obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Sdk obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Sdk() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otcsdkPINVOKE.delete_Sdk(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  /// <summary>Initializes the SDK.</summary>
  /// It sets the verbosity levels of the internal logger of the SDK and starts the EnumerationManager in a dedicated thread
  /// to monitor the availability of devices.
  /// <param name="logScreen">         defines the minimum verbosity level of log messages displayed on the standard output and error.</param> 
  /// <param name="logFile">           defines the minimum verbosity level of log messages out to the logfile.</param> 
  /// <param name="logFilenamePrefix"> for the log file (logFilenamePrefix_YYYY_MM_DD-hh-mm-ss.log). If empty, it defaults to "OtcSDK".</param>
  public static void init(Verbosity logScreen, Verbosity logFile, string logFilenamePrefix) {
    otcsdkPINVOKE.Sdk_init__SWIG_0((int)logScreen, (int)logFile, logFilenamePrefix);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>Initializes the SDK.</summary>
  /// It sets the verbosity levels of the internal logger of the SDK and starts the EnumerationManager in a dedicated thread
  /// to monitor the availability of devices.
  /// <param name="logScreen">         defines the minimum verbosity level of log messages displayed on the standard output and error.</param> 
  /// <param name="logFile">           defines the minimum verbosity level of log messages out to the logfile.</param>
  public static void init(Verbosity logScreen, Verbosity logFile) {
    otcsdkPINVOKE.Sdk_init__SWIG_1((int)logScreen, (int)logFile);
  }

  /// <summary>Sets the priority of the calibration file sources.</summary>
  /// The priority of the sources needs to be set prior to connecting to a device. If you want to use less than three potential calibration
  /// file source, set the one you do not require to Empty. The different sources have individual requirements for them to work:
  /// - Device. Not all types of Optris cameras have their calibration files stored on-device.
  /// - Filesystem. The source directory should be accessible and the SDK should have the rights to copy the calibration files from
  ///   it to their target destination. The source directory needs to be specified via the Sdk::setCalibrationFileSourceDirectory()
  ///   method.
  /// - Internet. Access to the internet is required.
  /// The SDK does not yet feature the ability to download the calibration from the device.
  /// <param name="first">  source with the highest priority.</param> 
  /// <param name="second"> source with a medium priority.</param> 
  /// <param name="third">  source with the lowest priority.</param> 
  /// <returns>true, if priority was successfully set. False, otherwise.</returns>
  public static bool setCalibrationFileSources(CalibrationFileSource first, CalibrationFileSource second, CalibrationFileSource third) {
    bool ret = otcsdkPINVOKE.Sdk_setCalibrationFileSources((int)first, (int)second, (int)third);
    return ret;
  }

  /// <summary>Sets the source directory from which calibration files can be copied.</summary>
  /// If set to an empty string, the SDK will skip this option of acquiring calibration files.
  /// <param name="sourceDirectoryPath"> from which calibration files can be copied.</param> 
  /// <returns>true, if the source directory was set successfully. False, otherwise.</returns>
  public static bool setCalibrationFileSourceDirectory(string sourceDirectoryPath) {
    bool ret = otcsdkPINVOKE.Sdk_setCalibrationFileSourceDirectory(sourceDirectoryPath);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>Returns an object holding version and build information about the SDK.</summary>
  /// <returns>object holding version and build information about the SDK.</returns>
  public static VersionInfo getVersionInfo() {
    VersionInfo ret = new VersionInfo(otcsdkPINVOKE.Sdk_getVersionInfo(), true);
    return ret;
  }

}

}
