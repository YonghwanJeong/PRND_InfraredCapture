//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Optris.OtcSDK {
/// <summary>Encapsulates version and build information about the SDK.</summary>
/// The version is represented in the format: major.minor.patch.

public class VersionInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal VersionInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(VersionInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(VersionInfo obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~VersionInfo() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otcsdkPINVOKE.delete_VersionInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  ///  Constructor.
  public VersionInfo() : this(otcsdkPINVOKE.new_VersionInfo(), true) {
  }

  /// <summary>Returns the SDK version as a string in the format: "major.minor.patch".</summary>
  /// <returns>SDK version as string.</returns>
  public string getVersionString() {
    string ret = otcsdkPINVOKE.VersionInfo_getVersionString(swigCPtr);
    return ret;
  }

  /// <summary>Returns the major version of the SDK.</summary>
  /// <returns>major version of the SDK.</returns>
  public int getMajorVersion() {
    int ret = otcsdkPINVOKE.VersionInfo_getMajorVersion(swigCPtr);
    return ret;
  }

  /// <summary>Returns the minor version of the SDK.</summary>
  /// <returns>minor version of the SDK.</returns>
  public int getMinorVersion() {
    int ret = otcsdkPINVOKE.VersionInfo_getMinorVersion(swigCPtr);
    return ret;
  }

  /// <summary>Returns the patch version of the SDK.</summary>
  /// <returns>patch version of the SDK.</returns>
  public int getPatchVersion() {
    int ret = otcsdkPINVOKE.VersionInfo_getPatchVersion(swigCPtr);
    return ret;
  }

  /// <summary>Compares the provided version with the one of the SDK.</summary>
  /// <returns>0  if both versions are equal.
  ///             -1 if the SDK version is less than the provided one.
  ///             +1 if the SDK version is greater than the provide one.</returns>
  public int compareVersion(int major, int minor, int patch) {
    int ret = otcsdkPINVOKE.VersionInfo_compareVersion(swigCPtr, major, minor, patch);
    return ret;
  }

  /// <summary>Returns the build type of the SDK.</summary>
  /// <returns>"Release" for release builds and "Debug" for debug builds.</returns>
  public string getBuildType() {
    string ret = otcsdkPINVOKE.VersionInfo_getBuildType(swigCPtr);
    return ret;
  }

  /// <summary>Returns the UTC build date of the SDK in ISO format.</summary>
  /// <returns>the UTC build date in ISO format.</returns>
  public string getBuildDate() {
    string ret = otcsdkPINVOKE.VersionInfo_getBuildDate(swigCPtr);
    return ret;
  }

  /// <summary>Returns the first part of the hash of the commit that was used to build the SDK.</summary>
  /// <returns>first part of the hash of the commit that was used to build the SDK.</returns>
  public string getCommitHash() {
    string ret = otcsdkPINVOKE.VersionInfo_getCommitHash(swigCPtr);
    return ret;
  }

  /// <summary>Returns the date of the commit that was used to build the SDK in ISO format.</summary>
  /// <returns>date of the commit that was used to build the SDK in ISO format</returns>
  public string getCommitDate() {
    string ret = otcsdkPINVOKE.VersionInfo_getCommitDate(swigCPtr);
    return ret;
  }

  /// <summary>Returns the branch name used to build the SDK.</summary>
  /// <returns>branch name used to build the SDK.</returns>
  public string getCommitBranch() {
    string ret = otcsdkPINVOKE.VersionInfo_getCommitBranch(swigCPtr);
    return ret;
  }

  /// <summary>Returns the name of the SDK.</summary>
  /// <returns>name of the SDK.</returns>
  public string getName() {
    string ret = otcsdkPINVOKE.VersionInfo_getName(swigCPtr);
    return ret;
  }

  /// <summary>Returns the name of the company that created the SDK.</summary>
  /// <returns>name of the company that created the SDK.</returns>
  public string getCompany() {
    string ret = otcsdkPINVOKE.VersionInfo_getCompany(swigCPtr);
    return ret;
  }

  /// <summary>Returns the copyright string of the SDK.</summary>
  /// <returns>copyright string of the SDK.</returns>
  public string getCopyright() {
    string ret = otcsdkPINVOKE.VersionInfo_getCopyright(swigCPtr);
    return ret;
  }

  /// <summary>Returns a description of the SDK.</summary>
  /// <returns>description of the SDK.</returns>
  public string getDescription() {
    string ret = otcsdkPINVOKE.VersionInfo_getDescription(swigCPtr);
    return ret;
  }

  /// <summary>Returns the name of the operating system for which the SDK was build for.</summary>
  /// Examples: Windows, Linux.
  /// <returns>name of the operating system for which the SDK was build for.</returns>
  public string getBuildOS() {
    string ret = otcsdkPINVOKE.VersionInfo_getBuildOS(swigCPtr);
    return ret;
  }

  /// <summary>Returns the name of the platform for which the SDK was build for.</summary>
  /// Examples: AMD64, ARM64.
  /// <returns>name of the platform for which the SDK was build for.</returns>
  public string getBuildPlatform() {
    string ret = otcsdkPINVOKE.VersionInfo_getBuildPlatform(swigCPtr);
    return ret;
  }

}

}
