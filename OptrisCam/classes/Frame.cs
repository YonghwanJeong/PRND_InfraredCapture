//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Optris.OtcSDK {
/// <summary>Represents a data frame received from a device.</summary>
/// The encapsulated data may represent thermal or energy measurements in an internal format. See the
/// specialized child classes like ThermalFrame for more details.
/// The origin of coordinates is located in the upper left corner with the x-axis pointing right and
/// the y-axis pointing down.

public class Frame : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Frame(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Frame obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Frame obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Frame() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otcsdkPINVOKE.delete_Frame(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  ///  Constructor.
  public Frame() : this(otcsdkPINVOKE.new_Frame__SWIG_0(), true) {
  }

  ///  Copy constructor.
  public Frame(Frame arg0) : this(otcsdkPINVOKE.new_Frame__SWIG_1(Frame.getCPtr(arg0)), true) {
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>Returns the frame data value at the given index.</summary>
  /// <param name="index"> of the desired frame data.</param> 
  /// <returns>frame data value at the given index.</returns> 
  /// <exception cref="SDKException"> if the index is out of range.</exception>
  public ushort getValue(int index) {
    ushort ret = otcsdkPINVOKE.Frame_getValue__SWIG_0(swigCPtr, index);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>Returns the frame data value at the given coordinates.</summary>
  /// <param name="x"> coordinate.</param> 
  /// <param name="y"> coordinate.</param> 
  /// <returns>frame data value at the given coordinates.</returns> 
  /// <exception cref="SDKException"> if the coordinates are out of range.</exception>
  public ushort getValue(int x, int y) {
    ushort ret = otcsdkPINVOKE.Frame_getValue__SWIG_1(swigCPtr, x, y);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>Returns an iterator with read access.</summary>
  /// The iterator traverses the frame in a row major fashion.
  /// <returns>iterator with read access.</returns>
  public ConstFrameIterator getConstIterator() {
    ConstFrameIterator ret = new ConstFrameIterator(otcsdkPINVOKE.Frame_getConstIterator(swigCPtr), true);
    return ret;
  }

  /// <summary>Returns the width in pixels of the frame.</summary>
  /// <returns>width in pixel of the frame.</returns>
  public int getWidth() {
    int ret = otcsdkPINVOKE.Frame_getWidth(swigCPtr);
    return ret;
  }

  /// <summary>Returns the height in pixel of the frame.</summary>
  /// <returns>height in pixels of the frame.</returns>
  public int getHeight() {
    int ret = otcsdkPINVOKE.Frame_getHeight(swigCPtr);
    return ret;
  }

  /// <summary>Returns the overall size in pixels of the frame (width * height).</summary>
  /// <returns>size in pixels of the frame.</returns>
  public int getSize() {
    int ret = otcsdkPINVOKE.Frame_getSize(swigCPtr);
    return ret;
  }

  /// <summary>Returns whether the frame is empty.</summary>
  /// <returns>true if the frame is empty. False otherwise.</returns>
  public bool isEmpty() {
    bool ret = otcsdkPINVOKE.Frame_isEmpty(swigCPtr);
    return ret;
  }

  ///  Clears the frame data.
  public void clear() {
    otcsdkPINVOKE.Frame_clear(swigCPtr);
  }

  /// <summary>Resizes the frame.</summary>
  /// <param name="width">  of the resized frame in pixels.</param> 
  /// <param name="height"> of the resized frame in pixels.</param>
  public void resize(int width, int height) {
    otcsdkPINVOKE.Frame_resize(swigCPtr, width, height);
  }

  /// <summary>Returns a complete copy of this frame.</summary>
  /// <returns>a complete copy of this frame.</returns>
  public Frame clone() {
    Frame ret = new Frame(otcsdkPINVOKE.Frame_clone(swigCPtr), true);
    return ret;
  }

  /// <summary>Copies the internal values to the destination array.</summary>
  /// <remarks>Make sure the destination arrays has at least the size returned by getSize().</remarks><param name="destination"> array to copy the internal data to.</param> 
  /// <param name="size">        in bytes. The specified size is limited to [0, frame size in bytes].</param>
  public void copyDataTo(ushort[] destination, int size) {
    otcsdkPINVOKE.Frame_copyDataTo(swigCPtr, destination, size);
  }

}

}
