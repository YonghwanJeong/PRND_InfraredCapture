//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Optris.OtcSDK {
///  Encapsulates the on device network configuration.

public class DeviceNetworkConfig : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DeviceNetworkConfig(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DeviceNetworkConfig obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(DeviceNetworkConfig obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~DeviceNetworkConfig() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otcsdkPINVOKE.delete_DeviceNetworkConfig(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  ///  Constructor.
  public DeviceNetworkConfig() : this(otcsdkPINVOKE.new_DeviceNetworkConfig__SWIG_0(), true) {
  }

  /// <summary>Constructor.</summary>
  /// <param name="deviceIp">        address.</param> 
  /// <param name="destinationIp">   address for the device to send data to.</param> 
  /// <param name="destinationPort"> for the device to send data to.</param> 
  /// <param name="subnetMask">      of the network.</param>
  public DeviceNetworkConfig(IpAddress deviceIp, IpAddress destinationIp, Port destinationPort, IpAddress subnetMask) : this(otcsdkPINVOKE.new_DeviceNetworkConfig__SWIG_1(IpAddress.getCPtr(deviceIp), IpAddress.getCPtr(destinationIp), Port.getCPtr(destinationPort), IpAddress.getCPtr(subnetMask)), true) {
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>Returns the IP address of the device.</summary>
  /// <returns>IP address of the device.</returns>
  public IpAddress getDeviceIp() {
    IpAddress ret = new IpAddress(otcsdkPINVOKE.DeviceNetworkConfig_getDeviceIp(swigCPtr), false);
    return ret;
  }

  /// <summary>Returns the IP address to which the device sends its data to.</summary>
  /// <returns>IP address to which the device sends its data to.</returns>
  public IpAddress getDestinationIp() {
    IpAddress ret = new IpAddress(otcsdkPINVOKE.DeviceNetworkConfig_getDestinationIp(swigCPtr), false);
    return ret;
  }

  /// <summary>Returns the port to which the device sends its data to.</summary>
  /// <returns>port to which the device sends its data to.</returns>
  public Port getDestinationPort() {
    Port ret = new Port(otcsdkPINVOKE.DeviceNetworkConfig_getDestinationPort(swigCPtr), false);
    return ret;
  }

  /// <summary>Returns the subnet mask.</summary>
  /// <returns>subnet mask.</returns>
  public IpAddress getSubnetMask() {
    IpAddress ret = new IpAddress(otcsdkPINVOKE.DeviceNetworkConfig_getSubnetMask(swigCPtr), false);
    return ret;
  }

  /// <summary>Sets the device IP address.</summary>
  /// <param name="address"> to set.</param>
  public void setDeviceIp(IpAddress address) {
    otcsdkPINVOKE.DeviceNetworkConfig_setDeviceIp(swigCPtr, IpAddress.getCPtr(address));
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>Sets the destination IP address to which the device sends its data to.</summary>
  /// <param name="address"> to set.</param>
  public void setDestinationIp(IpAddress address) {
    otcsdkPINVOKE.DeviceNetworkConfig_setDestinationIp(swigCPtr, IpAddress.getCPtr(address));
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>Sets the port to which the device sends its data to.</summary>
  /// <param name="port"> to set.</param>
  public void setDestinationPort(Port port) {
    otcsdkPINVOKE.DeviceNetworkConfig_setDestinationPort(swigCPtr, Port.getCPtr(port));
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>Sets the subnet mask.</summary>
  /// <param name="subnetMask"> to set.</param>
  public void setSubnetMask(IpAddress subnetMask) {
    otcsdkPINVOKE.DeviceNetworkConfig_setSubnetMask(swigCPtr, IpAddress.getCPtr(subnetMask));
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
