//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Optris.OtcSDK {
/// <summary>Holds important information about a device.</summary>
/// Instances of this class are provided by the EnumerationManager and can be used to establish an connection
/// through an IRImager implementation.

public class DeviceInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DeviceInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DeviceInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(DeviceInfo obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~DeviceInfo() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otcsdkPINVOKE.delete_DeviceInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  ///  Constructor.
  public DeviceInfo() : this(otcsdkPINVOKE.new_DeviceInfo(), true) {
  }

  /// <summary>Determines the device type based on the provided hardware and firmware revisions.</summary>
  /// <returns>determined device type.</returns>
  public static DeviceType determineDeviceType(ushort hardwareRevision, ushort firmwareRevision) {
    DeviceType ret = (DeviceType)otcsdkPINVOKE.DeviceInfo_determineDeviceType(hardwareRevision, firmwareRevision);
    return ret;
  }

  /// <summary>Sets the serial number of the device.</summary>
  /// <param name="serialNumber"> to set.</param>
  public void setSerialNumber(uint serialNumber) {
    otcsdkPINVOKE.DeviceInfo_setSerialNumber(swigCPtr, serialNumber);
  }

  /// <summary>Returns the serial number of the device.</summary>
  /// <returns>serial number of the device.</returns>
  public uint getSerialNumber() {
    uint ret = otcsdkPINVOKE.DeviceInfo_getSerialNumber(swigCPtr);
    return ret;
  }

  /// <summary>Sets the connection interface of the device.</summary>
  /// This can, for example, be USB or Ethernet.
  /// <param name="connectionInterface"> to set.</param>
  public void setConnectionInterface(string connectionInterface) {
    otcsdkPINVOKE.DeviceInfo_setConnectionInterface(swigCPtr, connectionInterface);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>Returns the connection interface of the device.</summary>
  /// This can, for example, be USB or Ethernet.
  /// <returns>connection interface of the device.</returns>
  public string getConnectionInterface() {
    string ret = otcsdkPINVOKE.DeviceInfo_getConnectionInterface(swigCPtr);
    return ret;
  }

  /// <summary>Sets the IP address.</summary>
  /// For Ethernet connections this refers to the IP address of the device.
  /// <param name="ipAddress"> address to set.</param>
  public void setIpAddress(IpAddress ipAddress) {
    otcsdkPINVOKE.DeviceInfo_setIpAddress(swigCPtr, IpAddress.getCPtr(ipAddress));
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>Returns the IP address.</summary>
  /// For Ethernet connections this refers to the IP address of the device.
  /// <returns>IP address.</returns>
  public IpAddress getIpAddress() {
    IpAddress ret = new IpAddress(otcsdkPINVOKE.DeviceInfo_getIpAddress(swigCPtr), false);
    return ret;
  }

  /// <summary>Sets the port.</summary>
  /// For Ethernet connections this refers to the port the device will send its data to.
  /// <param name="port"> to set.</param>
  public void setPort(Port port) {
    otcsdkPINVOKE.DeviceInfo_setPort(swigCPtr, Port.getCPtr(port));
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>Returns the port.</summary>
  /// For Ethernet connections this refers to the port the device will send its data to.
  /// <returns>port.</returns>
  public Port getPort() {
    Port ret = new Port(otcsdkPINVOKE.DeviceInfo_getPort(swigCPtr), false);
    return ret;
  }

  /// <summary>Return the device type.</summary>
  /// <returns>device type.</returns>
  public DeviceType getDeviceType() {
    DeviceType ret = (DeviceType)otcsdkPINVOKE.DeviceInfo_getDeviceType(swigCPtr);
    return ret;
  }

  /// <summary>Sets the hardware and firmware revisions.</summary>
  /// <param name="hardware"> revision to set.</param> 
  /// <param name="firmware"> revision to set.</param>
  public void setRevisions(ushort hardware, ushort firmware) {
    otcsdkPINVOKE.DeviceInfo_setRevisions(swigCPtr, hardware, firmware);
  }

  /// <summary>Returns the hardware revision.</summary>
  /// <returns>hardware revision.</returns>
  public ushort getHardwareRevision() {
    ushort ret = otcsdkPINVOKE.DeviceInfo_getHardwareRevision(swigCPtr);
    return ret;
  }

  /// <summary>Returns the firmware revision.</summary>
  /// <returns>firmware revision.</returns>
  public ushort getFirmwareRevision() {
    ushort ret = otcsdkPINVOKE.DeviceInfo_getFirmwareRevision(swigCPtr);
    return ret;
  }

  /// <summary>Returns a complete copy of this informatin.</summary>
  /// <returns>a complete copy of this information.</returns>
  public DeviceInfo clone() {
    DeviceInfo ret = new DeviceInfo(otcsdkPINVOKE.DeviceInfo_clone(swigCPtr), true);
    return ret;
  }

}

}
