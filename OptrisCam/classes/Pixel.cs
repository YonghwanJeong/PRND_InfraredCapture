//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Optris.OtcSDK {
///  Represents a pixel with three color channels and 8 bits of color depth.

public class Pixel : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Pixel(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Pixel obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Pixel obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Pixel() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otcsdkPINVOKE.delete_Pixel(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  ///  Constructor.
  public Pixel() : this(otcsdkPINVOKE.new_Pixel__SWIG_0(), true) {
  }

  /// <summary>Constructor.</summary>
  /// <param name="red">   color value in [0, 255].</param> 
  /// <param name="green"> color value in [0, 255].</param> 
  /// <param name="blue">  color value in [0, 255].</param>
  public Pixel(byte red, byte green, byte blue) : this(otcsdkPINVOKE.new_Pixel__SWIG_1(red, green, blue), true) {
  }

  /// <summary>Returns the red color value.</summary>
  /// <returns>red color value in [0, 255].</returns>
  public byte getRed() {
    byte ret = otcsdkPINVOKE.Pixel_getRed(swigCPtr);
    return ret;
  }

  /// <summary>Returns the green color value.</summary>
  /// <returns>green color value in [0, 255].</returns>
  public byte getGreen() {
    byte ret = otcsdkPINVOKE.Pixel_getGreen(swigCPtr);
    return ret;
  }

  /// <summary>Returns the blue color value.</summary>
  /// <returns>blue color value in [0, 255].</returns>
  public byte getBlue() {
    byte ret = otcsdkPINVOKE.Pixel_getBlue(swigCPtr);
    return ret;
  }

  /// <summary>Returns a string representation of the pixel (red, green, blue).</summary>
  /// <returns>string representation of the pixel.</returns>
  public string toString() {
    string ret = otcsdkPINVOKE.Pixel_toString(swigCPtr);
    return ret;
  }

}

}
