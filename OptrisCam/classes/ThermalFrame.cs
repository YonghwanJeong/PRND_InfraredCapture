//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Optris.OtcSDK {
///  Encapsulates thermal frame data received from a device.

public class ThermalFrame : Frame {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ThermalFrame(global::System.IntPtr cPtr, bool cMemoryOwn) : base(otcsdkPINVOKE.ThermalFrame_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ThermalFrame obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ThermalFrame obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otcsdkPINVOKE.delete_ThermalFrame(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  // Store a reference to the image builder to avoid premature garbage collection
  private ImageBuilder imageBuilderReference;
  internal void addReference(ImageBuilder builder) {
    imageBuilderReference = builder;
  }

  ///  Constructor.
  public ThermalFrame() : this(otcsdkPINVOKE.new_ThermalFrame__SWIG_0(), true) {
  }

  ///  Copy constructor.
  public ThermalFrame(ThermalFrame arg0) : this(otcsdkPINVOKE.new_ThermalFrame__SWIG_1(ThermalFrame.getCPtr(arg0)), true) {
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>Returns the temperature in in °C at the given index.</summary>
  /// <param name="index"> of the desired frame temperature.</param> 
  /// <returns>temperature in in °C at the given index.</returns> 
  /// <exception cref="SDKException"> if index is out of range.</exception>
  public float getTemperature(int index) {
    float ret = otcsdkPINVOKE.ThermalFrame_getTemperature__SWIG_0(swigCPtr, index);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>Returns the temperature in in °C at the given coordinates.</summary>
  /// <param name="x"> coordinate.</param> 
  /// <param name="y"> coordinate.</param> 
  /// <returns>temperature in in °C at the given coordinate.</returns> 
  /// <exception cref="SDKException"> if the coordinates are out of range.</exception>
  public float getTemperature(int x, int y) {
    float ret = otcsdkPINVOKE.ThermalFrame_getTemperature__SWIG_1(swigCPtr, x, y);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>Returns the precision of the temperatures stored in the frame.</summary>
  /// <returns>precision of the temperatures stored in the frame.</returns>
  public TemperaturePrecision getTemperaturePrecision() {
    TemperaturePrecision ret = (TemperaturePrecision)otcsdkPINVOKE.ThermalFrame_getTemperaturePrecision(swigCPtr);
    return ret;
  }

  /// <summary>Returns the temperature converter.</summary>
  /// It can be used to convert and validate the thermal frame values to and from temperatures in °C.
  /// <returns>temperature converter.</returns>
  public TemperatureConverter getConverter() {
    TemperatureConverter ret = new TemperatureConverter(otcsdkPINVOKE.ThermalFrame_getConverter(swigCPtr), true);
    return ret;
  }

  /// <summary>Returns a complete copy of this frame.</summary>
  /// <returns>a complete copy of this frame.</returns>
  public new ThermalFrame clone() {
    ThermalFrame ret = new ThermalFrame(otcsdkPINVOKE.ThermalFrame_clone(swigCPtr), true);
    return ret;
  }

}

}
