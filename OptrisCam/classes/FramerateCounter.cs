//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Optris.OtcSDK {
/// <summary>Measures frame rates.</summary>
/// Internally a linked list is used to average the time measurements. This list always has an even number of elements
/// to avoid aliasing effects.

public class FramerateCounter : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FramerateCounter(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FramerateCounter obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(FramerateCounter obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~FramerateCounter() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otcsdkPINVOKE.delete_FramerateCounter(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  /// <summary>Constructor.</summary>
  /// <param name="interval">   time interval in milliseconds. Can be used to check the elapsed time between two subsequent
  ///                           calls of the trigger() method.</param> 
  /// <param name="smoothSize"> half the amount of data points used to calculate the frames per seconds. The resulting amount
  ///                           is rounded up to an even number.</param>
  public FramerateCounter(double interval, uint smoothSize) : this(otcsdkPINVOKE.new_FramerateCounter__SWIG_0(interval, smoothSize), true) {
  }

  /// <summary>Constructor.</summary>
  /// <param name="interval">   time interval in milliseconds. Can be used to check the elapsed time between two subsequent
  ///                           calls of the trigger() method.</param>
  public FramerateCounter(double interval) : this(otcsdkPINVOKE.new_FramerateCounter__SWIG_1(interval), true) {
  }

  /// <summary>Constructor.</summary>
  public FramerateCounter() : this(otcsdkPINVOKE.new_FramerateCounter__SWIG_2(), true) {
  }

  /// <summary>Takes a new time measurement and updates the frames per seconds.</summary>
  /// <returns>true if more time has elapsed since the last call of this method than specified by the interval parameter
  ///             of the constructor. False otherwise.</returns>
  public bool trigger() {
    bool ret = otcsdkPINVOKE.FramerateCounter_trigger(swigCPtr);
    return ret;
  }

  /// <summary>Returns the current frames per seconds.</summary>
  /// <returns>current frames per seconds.</returns>
  public double getFps() {
    double ret = otcsdkPINVOKE.FramerateCounter_getFps(swigCPtr);
    return ret;
  }

  ///  Default interval in milliseconds.
  public static readonly double DEFAULT_INTERVAL = otcsdkPINVOKE.FramerateCounter_DEFAULT_INTERVAL_get();
  ///  Default smoothing size.
  public static readonly uint DEFAULT_SMOOTH_SIZE = otcsdkPINVOKE.FramerateCounter_DEFAULT_SMOOTH_SIZE_get();
}

}
