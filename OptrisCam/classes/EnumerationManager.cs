//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Optris.OtcSDK {
/// <summary>Detects and monitors available devices.</summary>
/// It detects devices that the SDK can potentially connect to.
/// This class is implemented with the help of the Singleton design pattern. As a consequence, you have to use
/// the EnumerationManager::getInstance() method to interact with it.
/// Furthermore, allows the registration of observers aka. EnumerationClient that want be informed if the detection
/// status of a device changes.

public class EnumerationManager : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal EnumerationManager(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EnumerationManager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(EnumerationManager obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~EnumerationManager() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otcsdkPINVOKE.delete_EnumerationManager(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  /// <summary>Returns an instance of the EnumerationManager.</summary>
  /// Only one instance per program is available (Singleton).
  /// <returns>EnumerationManager instance.</returns>
  public static EnumerationManager getInstance() {
    EnumerationManager ret = new EnumerationManager(otcsdkPINVOKE.EnumerationManager_getInstance(), false);
    return ret;
  }

  /// <summary>Returns information about the currently detected devices.</summary>
  /// <param name="seconds">  <  0 the method waits indefintfly for the first detection pass to complete.
  ///                         == 0 the method will not wait.
  ///                         >  0 the method waits the given amount of seconds for th first detection pass
  ///                              to complete.</param> 
  /// <returns>a vector holding the current detected devices.</returns>
  public DeviceInfoVector getDetectedDevices(int seconds) {
    DeviceInfoVector ret = new DeviceInfoVector(otcsdkPINVOKE.EnumerationManager_getDetectedDevices__SWIG_0(swigCPtr, seconds), true);
    return ret;
  }

  /// <summary>Returns information about the currently detected devices.</summary>
  /// <returns>a vector holding the current detected devices.</returns>
  public DeviceInfoVector getDetectedDevices() {
    DeviceInfoVector ret = new DeviceInfoVector(otcsdkPINVOKE.EnumerationManager_getDetectedDevices__SWIG_1(swigCPtr), true);
    return ret;
  }

  /// <summary>Adds an observer/client that will be updated if a device detection status changes.</summary>
  /// <param name="client"> callback client.</param>
  public void addClient(EnumerationClient client) {
    otcsdkPINVOKE.EnumerationManager_addClient(swigCPtr, EnumerationClient.getCPtr(client));
  }

  /// <summary>Removes the given observer/client.</summary>
  /// <param name="client"> to remove.</param>
  public bool removeClient(EnumerationClient client) {
    bool ret = otcsdkPINVOKE.EnumerationManager_removeClient(swigCPtr, EnumerationClient.getCPtr(client));
    return ret;
  }

  /// <summary>Runs the connection event detection continuously.</summary>
  /// This method blocks until stopRunning() is called from a different thread or until the program
  /// terminates.
  /// <seealso cref="stopRunning"/>
  public void run() {
    otcsdkPINVOKE.EnumerationManager_run(swigCPtr);
  }

  /// <summary>Runs the connection event detection continuously in a dedicated thread.</summary>
  /// This method runs until stopRunning() is called from a different thread or until the program
  /// terminates.
  /// All callback methods of a registered EnumerationClient are called from this detection thread.
  /// <returns>true if the thread started within a second. False otherwise.</returns> 
  /// <seealso cref="stopRunning"/>
  public bool runAsync() {
    bool ret = otcsdkPINVOKE.EnumerationManager_runAsync(swigCPtr);
    return ret;
  }

  ///  Stops the continuous connection event detection.
  public void stopRunning() {
    otcsdkPINVOKE.EnumerationManager_stopRunning(swigCPtr);
  }

  /// <summary>Returns whether the connection event detection is running.</summary>
  /// <returns>whether the connection event detection is running.</returns>
  public bool isRunning() {
    bool ret = otcsdkPINVOKE.EnumerationManager_isRunning(swigCPtr);
    return ret;
  }

  /// <summary>Sets the minimum period in milliseconds for a single connection event detection run.</summary>
  /// <param name="period"> in milliseconds to set.</param>
  public void setDetectionPeriod(int period) {
    otcsdkPINVOKE.EnumerationManager_setDetectionPeriod(swigCPtr, period);
  }

  /// <summary>Returns the minimum period in milliseconds for a single connection event detection run.</summary>
  /// <returns>minimum period in milliseconds for a single connection event detection run.</returns>
  public int getDetectionPeriod() {
    int ret = otcsdkPINVOKE.EnumerationManager_getDetectionPeriod(swigCPtr);
    return ret;
  }

}

}
