//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Optris.OtcSDK {
/// <summary>Factory instantiating IRImager implementations.</summary>
/// The factory is implemented based on the Singleton design pattern. As a consequence, you have to use
/// the IRImagerFactory::getInstance() method to interact with it.

public class IRImagerFactory : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IRImagerFactory(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IRImagerFactory obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IRImagerFactory obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IRImagerFactory() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otcsdkPINVOKE.delete_IRImagerFactory(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  /// <summary>Returns an instance of the IRImagerFactory.</summary>
  /// Only one instance per program is available.
  /// <returns>IRImagerFactory instance.</returns>
  public static IRImagerFactory getInstance() {
    IRImagerFactory ret = new IRImagerFactory(otcsdkPINVOKE.IRImagerFactory_getInstance(), false);
    return ret;
  }

  /// <summary>Creates an instance of an IRImager implementation.</summary>
  /// <param name="name"> of the implementation to instantiate. Case insensitive.</param> 
  /// <returns>shared pointer to created IRImager instance.</returns> 
  /// <exception cref="SDKException"> if the instantiation fails or an implementation with the given name is not
  ///                         available.</exception>
  public IRImager create(string name) {
    global::System.IntPtr cPtr = otcsdkPINVOKE.IRImagerFactory_create(swigCPtr, name);
    IRImager ret = (cPtr == global::System.IntPtr.Zero) ? null : new IRImager(cPtr, true);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
