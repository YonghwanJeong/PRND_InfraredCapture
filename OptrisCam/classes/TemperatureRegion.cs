//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Optris.OtcSDK {
/// <summary>Characterizes a rectangular region by the indexes of the upper left and the lower right corners       along with an associated temperature.</summary>
/// Note that the origin of coordinates is located in upper left corner with the x-axis pointing right and
/// the y-axis pointing downwards.
///  +---&gt; x
///  |
///  v     1-----------+
///  y     |           |
///        |           |
///        +-----------2
///  =&gt; x1 &lt;= x2 &amp; y1 &lt;= y2

public class TemperatureRegion : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TemperatureRegion(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TemperatureRegion obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(TemperatureRegion obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~TemperatureRegion() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otcsdkPINVOKE.delete_TemperatureRegion(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  ///  Constructor.
  public TemperatureRegion() : this(otcsdkPINVOKE.new_TemperatureRegion__SWIG_0(), true) {
  }

  /// <summary>Constructor.</summary>
  /// <param name="x1"> x index of the upper left corner.</param> 
  /// <param name="y1"> y index of the upper left corner.</param> 
  /// <param name="x2"> x index of the lower right corner.</param> 
  /// <param name="y2"> y index of the lower right corner.</param>
  public TemperatureRegion(int x1, int y1, int x2, int y2) : this(otcsdkPINVOKE.new_TemperatureRegion__SWIG_1(x1, y1, x2, y2), true) {
  }

  ///  Resets the temperature and the coordinates of the corners.
  public void reset() {
    otcsdkPINVOKE.TemperatureRegion_reset(swigCPtr);
  }

  /// <summary>Returns whether the region fits within a rectangle of the given dimensions.</summary>
  /// <param name="width">   in pixels of the rectangle to fit the region in.</param> 
  /// <param name="height">  in pixels of the rectangle to fit the region in.</param> 
  /// <param name="padding"> in pixels applied to the region in all directions during the check.</param> 
  /// <returns>true if the region fits in the given rectangle. False otherwise.</returns>
  public bool fitsInRectangle(int width, int height, int padding) {
    bool ret = otcsdkPINVOKE.TemperatureRegion_fitsInRectangle__SWIG_0(swigCPtr, width, height, padding);
    return ret;
  }

  /// <summary>Returns whether the region fits within a rectangle of the given dimensions.</summary>
  /// <param name="width">   in pixels of the rectangle to fit the region in.</param> 
  /// <param name="height">  in pixels of the rectangle to fit the region in.</param> 
  /// <returns>true if the region fits in the given rectangle. False otherwise.</returns>
  public bool fitsInRectangle(int width, int height) {
    bool ret = otcsdkPINVOKE.TemperatureRegion_fitsInRectangle__SWIG_1(swigCPtr, width, height);
    return ret;
  }

  ///  Associated temperature in Â°C.
  public float temperature {
    set {
      otcsdkPINVOKE.TemperatureRegion_temperature_set(swigCPtr, value);
    } 
    get {
      float ret = otcsdkPINVOKE.TemperatureRegion_temperature_get(swigCPtr);
      return ret;
    } 
  }

  ///  X index of the upper left corner.
  public int x1 {
    set {
      otcsdkPINVOKE.TemperatureRegion_x1_set(swigCPtr, value);
    } 
    get {
      int ret = otcsdkPINVOKE.TemperatureRegion_x1_get(swigCPtr);
      return ret;
    } 
  }

  ///  Y index of the upper left corner.
  public int y1 {
    set {
      otcsdkPINVOKE.TemperatureRegion_y1_set(swigCPtr, value);
    } 
    get {
      int ret = otcsdkPINVOKE.TemperatureRegion_y1_get(swigCPtr);
      return ret;
    } 
  }

  ///  X index of the lower right corner.
  public int x2 {
    set {
      otcsdkPINVOKE.TemperatureRegion_x2_set(swigCPtr, value);
    } 
    get {
      int ret = otcsdkPINVOKE.TemperatureRegion_x2_get(swigCPtr);
      return ret;
    } 
  }

  ///  Y index of the lower right corner.
  public int y2 {
    set {
      otcsdkPINVOKE.TemperatureRegion_y2_set(swigCPtr, value);
    } 
    get {
      int ret = otcsdkPINVOKE.TemperatureRegion_y2_get(swigCPtr);
      return ret;
    } 
  }

}

}
