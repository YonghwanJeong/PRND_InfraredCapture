//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Optris.OtcSDK {
/// <summary>Defines the interface for classes realizing operation modes.</summary>
/// Each operation mode encapsulates a valid combination of the following configuration settings:
///  - Optics
///  - Temperature range
///  - Output video format
/// The available operation modes depend on the device, its optics, its calibrations, the video format
/// definitions and the type of connection to the device (USB, Ethernet).

public class OperationMode : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal OperationMode(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(OperationMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~OperationMode() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          otcsdkPINVOKE.delete_OperationMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  /// <summary>Returns the field of view in degrees of the optics.</summary>
  /// <returns>field of view in degrees of the optics.</returns>
  public virtual int getFieldOfView() {
    int ret = otcsdkPINVOKE.OperationMode_getFieldOfView(swigCPtr);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>Returns an optional string that further specifies the optics.</summary>
  /// <returns>optional string that further specifies the optics.</returns>
  public virtual string getOpticsText() {
    string ret = otcsdkPINVOKE.OperationMode_getOpticsText(swigCPtr);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>Returns the lower limit temperature in °C depended whether the range is extended.</summary>
  /// <returns>lower limit temperature in °C depended whether the range is extended.</returns>
  public virtual float getTemperatureLowerLimit() {
    float ret = otcsdkPINVOKE.OperationMode_getTemperatureLowerLimit(swigCPtr);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>Returns the upper limit temperature in °C depended whether the range is extended.</summary>
  /// <returns>upper limit temperature in °C depended whether the range is extended.</returns>
  public virtual float getTemperatureUpperLimit() {
    float ret = otcsdkPINVOKE.OperationMode_getTemperatureUpperLimit(swigCPtr);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>Returns the lower non extended limit temperature in °C.</summary>
  /// <returns>lower non extended limit temperature in °C.</returns>
  public virtual float getTemperatureNormalLowerLimit() {
    float ret = otcsdkPINVOKE.OperationMode_getTemperatureNormalLowerLimit(swigCPtr);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>Returns the upper non extended limit temperature in °CS.</summary>
  /// <returns>upper non extended limit temperature in °C.</returns>
  public virtual float getTemperatureNormalUpperLimit() {
    float ret = otcsdkPINVOKE.OperationMode_getTemperatureNormalUpperLimit(swigCPtr);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>Returns the lower extended limit temperature in °C.</summary>
  /// If this limit can not be extened, this will return the same value as getTemperatureNormalLowerLimit().
  /// <returns>lower extend limit temperature in °CS.</returns>
  public virtual float getTemperatureExtendedLowerLimit() {
    float ret = otcsdkPINVOKE.OperationMode_getTemperatureExtendedLowerLimit(swigCPtr);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>Returns the upper extended limit temperature in °C.</summary>
  /// If this limit can not be extened, this will return the same value as getTemperatureNormalUpperLimit().
  /// <returns>upper extend limit temperature in °CS.</returns>
  public virtual float getTemperatureExtendedUpperLimit() {
    float ret = otcsdkPINVOKE.OperationMode_getTemperatureExtendedUpperLimit(swigCPtr);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>Returns whether the temperature range is currently extended.</summary>
  /// <returns>true, if the temperature range is currently extended. False, otherwise.</returns>
  public virtual bool isTemperatureRangeExtended() {
    bool ret = otcsdkPINVOKE.OperationMode_isTemperatureRangeExtended(swigCPtr);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>Returns the width of the frame in pixels.</summary>
  /// <returns>width of the frame in pixels.</returns>
  public virtual int getFrameWidth() {
    int ret = otcsdkPINVOKE.OperationMode_getFrameWidth(swigCPtr);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>Returns the height of the frame in pixels.</summary>
  /// <returns>height of the frame in pixels.</returns>
  public virtual int getFrameHeight() {
    int ret = otcsdkPINVOKE.OperationMode_getFrameHeight(swigCPtr);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>Returns the framerate in Hz.</summary>
  /// <returns>framerate in Hz.</returns>
  public virtual int getFramerate() {
    int ret = otcsdkPINVOKE.OperationMode_getFramerate(swigCPtr);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>Returns a string representation of the operation mode.</summary>
  /// <returns>string representation of the operation mode.</returns>
  public virtual string toString() {
    string ret = otcsdkPINVOKE.OperationMode_toString(swigCPtr);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
