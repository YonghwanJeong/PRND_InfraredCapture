//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Optris.OtcSDK {
/// <summary>Rectangular measurement field with individual radiation parameters.</summary>
/// Once added via the IRImager the setters will no loner affect the processing of the field because the IRImager creates an
/// internal copy of the field.

public class MeasurementField : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MeasurementField(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MeasurementField obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(MeasurementField obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~MeasurementField() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otcsdkPINVOKE.delete_MeasurementField(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  ///  Constructor.
  public MeasurementField() : this(otcsdkPINVOKE.new_MeasurementField__SWIG_0(), true) {
  }

  /// <summary>Constructor.</summary>
  /// <param name="id">                 unique number to make the measurement fields identifiable.</param> 
  /// <param name="x">                  x-coordinate of the upper left corner of the rectangular field.</param> 
  /// <param name="y">                  y-coordinate of the upper left corner of the rectangular field.</param> 
  /// <param name="width">              width of the field in pixels.</param> 
  /// <param name="height">             height of the field in pixels.</param> 
  /// <param name="emissivity">         emissivity parameter of material to be monitored.</param> 
  /// <param name="transmissivity">     transmissivity of material in between camera and object, i.e. the transmissivity
  ///                                   of the protective glass, if used.</param> 
  /// <param name="ambientTemperature"> in °. Set it to INVALID_TEMPERATURE or less to force the SDK to estimate the ambient
  ///                                   temperature based on thermal probe readings of the camera.</param>
  public MeasurementField(int id, int x, int y, int width, int height, float emissivity, float transmissivity, float ambientTemperature) : this(otcsdkPINVOKE.new_MeasurementField__SWIG_1(id, x, y, width, height, emissivity, transmissivity, ambientTemperature), true) {
  }

  /// <summary>Constructor.</summary>
  /// <param name="id">                 unique number to make the measurement fields identifiable.</param> 
  /// <param name="x">                  x-coordinate of the upper left corner of the rectangular field.</param> 
  /// <param name="y">                  y-coordinate of the upper left corner of the rectangular field.</param> 
  /// <param name="width">              width of the field in pixels.</param> 
  /// <param name="height">             height of the field in pixels.</param> 
  /// <param name="emissivity">         emissivity parameter of material to be monitored.</param> 
  /// <param name="transmissivity">     transmissivity of material in between camera and object, i.e. the transmissivity
  ///                                   of the protective glass, if used.</param>
  public MeasurementField(int id, int x, int y, int width, int height, float emissivity, float transmissivity) : this(otcsdkPINVOKE.new_MeasurementField__SWIG_2(id, x, y, width, height, emissivity, transmissivity), true) {
  }

  /// <summary>Constructor.</summary>
  /// <param name="id">                 unique number to make the measurement fields identifiable.</param> 
  /// <param name="x">                  x-coordinate of the upper left corner of the rectangular field.</param> 
  /// <param name="y">                  y-coordinate of the upper left corner of the rectangular field.</param> 
  /// <param name="width">              width of the field in pixels.</param> 
  /// <param name="height">             height of the field in pixels.</param> 
  /// <param name="emissivity">         emissivity parameter of material to be monitored.</param>
  public MeasurementField(int id, int x, int y, int width, int height, float emissivity) : this(otcsdkPINVOKE.new_MeasurementField__SWIG_3(id, x, y, width, height, emissivity), true) {
  }

  /// <summary>Constructor.</summary>
  /// <param name="id">                 unique number to make the measurement fields identifiable.</param> 
  /// <param name="x">                  x-coordinate of the upper left corner of the rectangular field.</param> 
  /// <param name="y">                  y-coordinate of the upper left corner of the rectangular field.</param> 
  /// <param name="width">              width of the field in pixels.</param> 
  /// <param name="height">             height of the field in pixels.</param>
  public MeasurementField(int id, int x, int y, int width, int height) : this(otcsdkPINVOKE.new_MeasurementField__SWIG_4(id, x, y, width, height), true) {
  }

  ///  Copy constructor.
  public MeasurementField(MeasurementField rhs) : this(otcsdkPINVOKE.new_MeasurementField__SWIG_5(MeasurementField.getCPtr(rhs)), true) {
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>Returns the id of the measurement field.</summary>
  /// <returns>id of the measurement field.</returns>
  public int getId() {
    int ret = otcsdkPINVOKE.MeasurementField_getId(swigCPtr);
    return ret;
  }

  /// <summary>Sets the id of the measurement field.</summary>
  /// <param name="id"> new id of the measurement field.</param>
  public void setId(int id) {
    otcsdkPINVOKE.MeasurementField_setId(swigCPtr, id);
  }

  /// <summary>Returns the field data value at the given index.</summary>
  /// <param name="index"> of the desired field data.</param> 
  /// <returns>field data value at the given index.</returns> 
  /// <exception cref="SDKException"> if the index is out of range.</exception>
  public ushort getValue(int index) {
    ushort ret = otcsdkPINVOKE.MeasurementField_getValue__SWIG_0(swigCPtr, index);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>Returns the temperature in in °C at the given index.</summary>
  /// <param name="index"> of the desired field temperature.</param> 
  /// <returns>temperature in in °C at the given index.</returns> 
  /// <exception cref="SDKException"> if index is out of range.</exception>
  public float getTemperature(int index) {
    float ret = otcsdkPINVOKE.MeasurementField_getTemperature__SWIG_0(swigCPtr, index);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>Returns the field data value at the given coordinates.</summary>
  /// <param name="x"> coordinate.</param> 
  /// <param name="y"> coordinate.</param> 
  /// <returns>field data value at the given coordinates.</returns> 
  /// <exception cref="SDKException"> if the coordinates are out of range.</exception>
  public ushort getValue(int x, int y) {
    ushort ret = otcsdkPINVOKE.MeasurementField_getValue__SWIG_1(swigCPtr, x, y);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>Returns the temperature in in °C at the given coordinates.</summary>
  /// <param name="x"> coordinate.</param> 
  /// <param name="y"> coordinate.</param> 
  /// <returns>temperature in in °C at the given coordinate.</returns> 
  /// <exception cref="SDKException"> if the coordinates are out of range.</exception>
  public float getTemperature(int x, int y) {
    float ret = otcsdkPINVOKE.MeasurementField_getTemperature__SWIG_1(swigCPtr, x, y);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>Returns an iterator with read access.</summary>
  /// The iterator traverses the measurement field in a row major fashion.
  /// <returns>iterator with read access.</returns>
  public ConstMeasurementFieldIterator getConstIterator() {
    ConstMeasurementFieldIterator ret = new ConstMeasurementFieldIterator(otcsdkPINVOKE.MeasurementField_getConstIterator(swigCPtr), true);
    return ret;
  }

  /// <summary>Returns the precision of the temperatures stored in the measurement field.</summary>
  /// <returns>precision of the temperatures stored in the measurement field.</returns>
  public TemperaturePrecision getTemperaturePrecision() {
    TemperaturePrecision ret = (TemperaturePrecision)otcsdkPINVOKE.MeasurementField_getTemperaturePrecision(swigCPtr);
    return ret;
  }

  /// <summary>Returns the x-coordinate of the upper left corner.</summary>
  /// <returns>x-coordinate of the upper left corner.</returns>
  public int getX() {
    int ret = otcsdkPINVOKE.MeasurementField_getX(swigCPtr);
    return ret;
  }

  /// <summary>Returns the y-coordinate of the upper left corner.</summary>
  /// <returns>y-coordinate of the upper left corner.</returns>
  public int getY() {
    int ret = otcsdkPINVOKE.MeasurementField_getY(swigCPtr);
    return ret;
  }

  /// <summary>Sets the position of the measurement field  by providing the coordinates of the upper       left corner.</summary>
  /// <param name="x"> coordinate of the upper left corner of the rectangular field.</param> 
  /// <param name="y"> coordinate of the upper left corner of the rectangular field.</param>
  public void setPosition(int x, int y) {
    otcsdkPINVOKE.MeasurementField_setPosition(swigCPtr, x, y);
  }

  /// <summary>Returns the width in pixels of the field.</summary>
  /// <returns>width in pixels of the field.</returns>
  public int getWidth() {
    int ret = otcsdkPINVOKE.MeasurementField_getWidth(swigCPtr);
    return ret;
  }

  /// <summary>Returns the height in pixels of the field.</summary>
  /// <returns>height in pixels of the field.</returns>
  public int getHeight() {
    int ret = otcsdkPINVOKE.MeasurementField_getHeight(swigCPtr);
    return ret;
  }

  /// <summary>Returns the overall size of the field (width * height).</summary>
  /// <returns>size of the field.</returns>
  public int getSize() {
    int ret = otcsdkPINVOKE.MeasurementField_getSize(swigCPtr);
    return ret;
  }

  /// <summary>Resizes the measurement field.</summary>
  /// <param name="width">  in pixels of the resized measurement field.</param> 
  /// <param name="height"> in pixels of the resized measurement field.</param>
  public void resize(int width, int height) {
    otcsdkPINVOKE.MeasurementField_resize(swigCPtr, width, height);
  }

  /// <summary>Returns the emissivity of the field.</summary>
  /// <returns>emissivity of the field.</returns>
  public float getEmissivity() {
    float ret = otcsdkPINVOKE.MeasurementField_getEmissivity(swigCPtr);
    return ret;
  }

  /// <summary>Returns the transmissivity of the field.</summary>
  /// <returns>transmissivity of the field.</returns>
  public float getTransmissivity() {
    float ret = otcsdkPINVOKE.MeasurementField_getTransmissivity(swigCPtr);
    return ret;
  }

  /// <summary>Returns the set ambient temperature in °C.</summary>
  /// <returns>ambient temperature in °C. It will be equal or less to INVALID_TEMPERATURE if the
  ///             SDK is forced to estimate it.</returns>
  public float getAmbientTemperature() {
    float ret = otcsdkPINVOKE.MeasurementField_getAmbientTemperature(swigCPtr);
    return ret;
  }

  /// <summary>Sets the radiation parameters stored in the measurement field.</summary>
  /// <param name="emissivity">         for the measurement field. Should be in [0, 1].</param> 
  /// <param name="transmissivity">     for the measurement field. Should be in [0, 1].</param> 
  /// <param name="ambientTemperature"> in °C. Set to INVALID_TEMPERATURE or less to force the SDK to estimate the
  ///                                   ambient temperature based on internal probe readings.</param> 
  /// <exception cref="SDKException"> if emissivity or transmissivity is not in [0, 1].</exception>
  public void setRadiationParameters(float emissivity, float transmissivity, float ambientTemperature) {
    otcsdkPINVOKE.MeasurementField_setRadiationParameters(swigCPtr, emissivity, transmissivity, ambientTemperature);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>Returns the overall mean temperature of the field in °C.</summary>
  /// <returns>overall mean temperature of the field in °C.</returns>
  public float getMeanTemperature() {
    float ret = otcsdkPINVOKE.MeasurementField_getMeanTemperature(swigCPtr);
    return ret;
  }

  /// <summary>Returns the minimum temperature in the field in °C.</summary>
  /// <returns>minimum temperature in the field in °C.</returns>
  public float getMinTemperature() {
    float ret = otcsdkPINVOKE.MeasurementField_getMinTemperature(swigCPtr);
    return ret;
  }

  /// <summary>Returns the maximum temperature in the field in °C.</summary>
  /// <returns>maximum temperature in the field in °C.</returns>
  public float getMaxTemperature() {
    float ret = otcsdkPINVOKE.MeasurementField_getMaxTemperature(swigCPtr);
    return ret;
  }

  /// <summary>Sets the mean, minimum and maximum temperatures in °C.</summary>
  /// <param name="mean"> temperature in °C.</param> 
  /// <param name="min">  temperature in °C.</param> 
  /// <param name="max">  temperature in °C.</param>
  public void setTemperatures(float mean, float min, float max) {
    otcsdkPINVOKE.MeasurementField_setTemperatures(swigCPtr, mean, min, max);
  }

  /// <summary>Returns the temperature converter.</summary>
  /// It can be used to convert and validate the thermal frame values to and from temperatures in °C.
  /// <returns>temperature converter.</returns>
  public TemperatureConverter getConverter() {
    TemperatureConverter ret = new TemperatureConverter(otcsdkPINVOKE.MeasurementField_getConverter(swigCPtr), true);
    return ret;
  }

  /// <summary>Returns a complete copy of this frame.</summary>
  /// <returns>a complete copy of this frame.</returns>
  public MeasurementField clone() {
    MeasurementField ret = new MeasurementField(otcsdkPINVOKE.MeasurementField_clone(swigCPtr), true);
    return ret;
  }

  /// <summary>Copies the internal values to the destination array.</summary>
  /// <remarks>Make sure the destination arrays has at least the size returned by getSize().</remarks><param name="destination"> array to copy the internal data to.</param> 
  /// <param name="size">        in bytes. The specified size is limited to [0, field size in bytes].</param>
  public void copyDataTo(ushort[] destination, int size) {
    otcsdkPINVOKE.MeasurementField_copyDataTo(swigCPtr, destination, size);
  }

}

}
