//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Optris.OtcSDK {
/// <summary>Iterates in a row major fashion over the image and grants read and write access to the pixels.</summary>
/// Potential width padding will be skipped.

public class ImageIterator : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ImageIterator(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ImageIterator obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ImageIterator obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ImageIterator() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otcsdkPINVOKE.delete_ImageIterator(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  /// <summary>Constructor.</summary>
  /// <param name="image"> to iterate over.</param>
  public ImageIterator(Image image) : this(otcsdkPINVOKE.new_ImageIterator(Image.getCPtr(image)), true) {
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>Returns whether there is a next pixel.</summary>
  /// <returns>true if there is a next pixel. False otherwise.</returns>
  public bool hasNext() {
    bool ret = otcsdkPINVOKE.ImageIterator_hasNext(swigCPtr);
    return ret;
  }

  ///  Moves to the next pixel.
  public void next() {
    otcsdkPINVOKE.ImageIterator_next(swigCPtr);
  }

  /// <summary>Returns the current pixel.</summary>
  /// <returns>current pixel.</returns>
  public Pixel getPixel() {
    Pixel ret = new Pixel(otcsdkPINVOKE.ImageIterator_getPixel(swigCPtr), true);
    return ret;
  }

  /// <summary>Sets the current pixel.</summary>
  /// <param name="pixel"> to set.</param>
  public void setPixel(Pixel pixel) {
    otcsdkPINVOKE.ImageIterator_setPixel(swigCPtr, Pixel.getCPtr(pixel));
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>Returns the current pixel index.</summary>
  /// <returns>index of the current pixel.</returns>
  public int getIndex() {
    int ret = otcsdkPINVOKE.ImageIterator_getIndex(swigCPtr);
    return ret;
  }

  /// <summary>Returns the x-coordinate of the current pixel.</summary>
  /// <returns>x-coordinate of the current pixel.</returns>
  public int getX() {
    int ret = otcsdkPINVOKE.ImageIterator_getX(swigCPtr);
    return ret;
  }

  /// <summary>Returns the y-coordinate of the current pixel.</summary>
  /// <returns>y-coordinate of the current pixel.</returns>
  public int getY() {
    int ret = otcsdkPINVOKE.ImageIterator_getY(swigCPtr);
    return ret;
  }

}

}
