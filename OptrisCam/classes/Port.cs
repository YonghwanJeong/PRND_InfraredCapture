//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Optris.OtcSDK {
/// <summary>Encapsulates a network port number.</summary>
/// Port number a usually separated by a : from an IP address like
///  192.168.0.2:50101
/// Here the port number is 50101.

public class Port : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Port(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Port obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Port obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Port() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otcsdkPINVOKE.delete_Port(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  /// <summary>Constructor.</summary>
  /// The port number is set to 0.
  public Port() : this(otcsdkPINVOKE.new_Port__SWIG_0(), true) {
  }

  /// <summary>Constructor.</summary>
  /// Native byte order is expected.
  /// <param name="number"> of the port in [0, 65535].</param>
  public Port(ushort number) : this(otcsdkPINVOKE.new_Port__SWIG_1(number), true) {
  }

  /// <summary>Sets the port number from the given string.</summary>
  /// <param name="port"> string.</param> 
  /// <exception cref="SDKException"> if the given string does not contain a valid port number.</exception>
  public Port(string port) : this(otcsdkPINVOKE.new_Port__SWIG_2(port), true) {
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
  }

  ///  Resets the port number to 0.
  public void reset() {
    otcsdkPINVOKE.Port_reset(swigCPtr);
  }

  /// <summary>Sets the port number to the given value.</summary>
  /// Native byte order is expected.
  /// <param name="number"> port number to set.</param>
  public void setNumber(ushort number) {
    otcsdkPINVOKE.Port_setNumber(swigCPtr, number);
  }

  /// <summary>Returns the port number.</summary>
  /// Native byte order is used.
  /// <returns>port number.</returns>
  public ushort getNumber() {
    ushort ret = otcsdkPINVOKE.Port_getNumber(swigCPtr);
    return ret;
  }

  /// <summary>Sets the port number from the given string.</summary>
  /// <param name="port"> number string.</param> 
  /// <exception cref="SDKException"> if the given string does not contain a valid port number.</exception>
  public void setFromString(string port) {
    otcsdkPINVOKE.Port_setFromString(swigCPtr, port);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>Returns the port number as a string.</summary>
  /// <returns>port number as a string.</returns>
  public string toString() {
    string ret = otcsdkPINVOKE.Port_toString(swigCPtr);
    return ret;
  }

}

}
