//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Optris.OtcSDK {
/// <summary>Encapsulates an IP v4 address.</summary>
/// IP address are stored in an array in the following oder:
/// a.b.c.d =&gt; [0: a, 1: b, 2: c, 3: d]

public class IpAddress : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IpAddress(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IpAddress obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IpAddress obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IpAddress() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otcsdkPINVOKE.delete_IpAddress(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  ///  Constructor.
  public IpAddress() : this(otcsdkPINVOKE.new_IpAddress__SWIG_0(), true) {
  }

  /// <summary>Constructor.</summary>
  /// <param name="address"> as an unsigned 32 bit integer in network byte order.</param>
  public IpAddress(uint address) : this(otcsdkPINVOKE.new_IpAddress__SWIG_1(address), true) {
  }

  /// <summary>Constructor.</summary>
  /// <param name="address"> string in dot notation (a.b.c.d).</param> 
  /// <exception cref="SDKException"> if address string is invalid.</exception>
  public IpAddress(string address) : this(otcsdkPINVOKE.new_IpAddress__SWIG_2(address), true) {
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>Constructor.</summary>
  /// <param name="a"> byte from an a.b.c.d IP address.</param> 
  /// <param name="b"> byte from an a.b.c.d IP address.</param> 
  /// <param name="c"> byte from an a.b.c.d IP address.</param> 
  /// <param name="d"> byte from an a.b.c.d IP address.</param>
  public IpAddress(byte a, byte b, byte c, byte d) : this(otcsdkPINVOKE.new_IpAddress__SWIG_3(a, b, c, d), true) {
  }

  ///  Resets all the bytes of the address to 0.0.0.0.
  public void reset() {
    otcsdkPINVOKE.IpAddress_reset(swigCPtr);
  }

  /// <summary>Sets the address from an unsigned 32 bit integer in network byte order.</summary>
  /// The network byte order is big-endian while many architectures like x64 or arm64 are little-endian.
  /// <param name="address"> as an unsigned 32 bit integer with the bytes in network order.</param>
  public void setFromUInt32(uint address) {
    otcsdkPINVOKE.IpAddress_setFromUInt32(swigCPtr, address);
  }

  /// <summary>Returns the address as an unsigned 32 bit integer in network byte order.</summary>
  /// The network byte order is big-endian while many architectures like x64 or arm64 are little-endian.
  /// <returns>address as an unsigned 32 bit integer in network byte order.</returns>
  public uint toUInt32() {
    uint ret = otcsdkPINVOKE.IpAddress_toUInt32(swigCPtr);
    return ret;
  }

  /// <summary>Sets the address from a string in dot notation (a.b.c.d).</summary>
  /// <param name="address"> in dot notation.</param> 
  /// <exception cref="SDKException"> if the address string is invalid.</exception>
  public void setFromString(string address) {
    otcsdkPINVOKE.IpAddress_setFromString(swigCPtr, address);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>Returns the address as a string in dot notation (a.b.c.d).</summary>
  /// <returns>the address as a string in dot notation.</returns>
  public string toString() {
    string ret = otcsdkPINVOKE.IpAddress_toString(swigCPtr);
    return ret;
  }

  /// <summary>Sets the value of the byte with the given index.</summary>
  /// <param name="index"> of the byte to set.</param> 
  /// <param name="value"> to set.</param> 
  /// <exception cref="SDKException"> if index is out of range.</exception>
  public void setByte(int index, byte value) {
    otcsdkPINVOKE.IpAddress_setByte(swigCPtr, index, value);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>Returns the value of the byte with the given index.</summary>
  /// <param name="index"> of the desired byte.</param> 
  /// <returns>value of the byte with the given index.</returns> 
  /// <exception cref="SDKException"> if the index is out of range.</exception>
  public byte getByte(int index) {
    byte ret = otcsdkPINVOKE.IpAddress_getByte(swigCPtr, index);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
