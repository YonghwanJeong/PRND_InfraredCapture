//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Optris.OtcSDK {
/// <summary>Encapsulates the metadata of frames provided by the devices.</summary>
/// This metadata is passed alongside the frame data from the devices via the streaming interface (e.g. USB, Ethernet).

public class FrameMetadata : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FrameMetadata(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FrameMetadata obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(FrameMetadata obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~FrameMetadata() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otcsdkPINVOKE.delete_FrameMetadata(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  ///  Constructor.
  public FrameMetadata() : this(otcsdkPINVOKE.new_FrameMetadata(), true) {
  }

  /// <summary>Returns the size of the raw metadata structure in bytes.</summary>
  /// <returns>size of the raw metadata structure in bytes.</returns>
  public int getSize() {
    int ret = otcsdkPINVOKE.FrameMetadata_getSize(swigCPtr);
    return ret;
  }

  /// <summary>Sets the size of the raw metadata structure in bytes.</summary>
  /// <param name="size"> of the raw metadata structure in bytes.</param>
  public void setSize(int size) {
    otcsdkPINVOKE.FrameMetadata_setSize(swigCPtr, size);
  }

  /// <summary>Returns whether the data provided in the associated frame is reliable.</summary>
  /// During the initial startup calibration the data provide by the device is not reliable.
  /// <returns>true if the data provided in the associated frame is reliable. False otherwise.</returns>
  public bool isFrameDataReliable() {
    bool ret = otcsdkPINVOKE.FrameMetadata_isFrameDataReliable(swigCPtr);
    return ret;
  }

  /// <summary>Returns a consecutive number for each received frame.</summary>
  /// <returns>consecutive number for each received frame.</returns>
  public uint getCounter() {
    uint ret = otcsdkPINVOKE.FrameMetadata_getCounter(swigCPtr);
    return ret;
  }

  /// <summary>Returns the frame number received from the device.</summary>
  /// This counter may overflow.
  /// <returns>frame number received form the device.</returns>
  public uint getCounterHardware() {
    uint ret = otcsdkPINVOKE.FrameMetadata_getCounterHardware(swigCPtr);
    return ret;
  }

  /// <summary>Sets the frame counters.</summary>
  /// <param name="counter">         to set.</param> 
  /// <param name="counterHardware"> to set.</param>
  public void setCounters(uint counter, uint counterHardware) {
    otcsdkPINVOKE.FrameMetadata_setCounters(swigCPtr, counter, counterHardware);
  }

  /// <summary>Returns the frame timestamp in UNITS (10000000 units per second).</summary>
  /// <returns>frame timestamp in UNITS (10000000 units per second).</returns>
  public long getTimestamp() {
    long ret = otcsdkPINVOKE.FrameMetadata_getTimestamp(swigCPtr);
    return ret;
  }

  /// <summary>Returns the media timestamp.</summary>
  /// <returns>media time stamp.</returns>
  public long getTimestampMedia() {
    long ret = otcsdkPINVOKE.FrameMetadata_getTimestampMedia(swigCPtr);
    return ret;
  }

  /// <summary>Sets the timestamps.</summary>
  /// <param name="timestamp">      frame timestamp in UNITS (10000000 units per second).</param> 
  /// <param name="timestampMedia"> media timestamp.</param>
  public void setTimestamps(long timestamp, long timestampMedia) {
    otcsdkPINVOKE.FrameMetadata_setTimestamps(swigCPtr, timestamp, timestampMedia);
  }

  /// <summary>Returns the state of the shutter flag at frame capturing time.</summary>
  /// <returns>state of the shutter flag at frame capturing time.</returns>
  public FlagState getFlagState() {
    FlagState ret = (FlagState)otcsdkPINVOKE.FrameMetadata_getFlagState(swigCPtr);
    return ret;
  }

  /// <summary>Sets the state of the shutter flag.</summary>
  /// <param name="flagState"> to set.</param>
  public void setFlagState(FlagState flagState) {
    otcsdkPINVOKE.FrameMetadata_setFlagState(swigCPtr, (int)flagState);
  }

  /// <summary>Returns the shutter flag temperature in °C at frame capturing time.</summary>
  /// <returns>shutter flag temperature in °C at frame capturing time.</returns>
  public float getTemperatureFlag() {
    float ret = otcsdkPINVOKE.FrameMetadata_getTemperatureFlag(swigCPtr);
    return ret;
  }

  /// <summary>Returns the housing temperature in °C at frame capturing time.</summary>
  /// <returns>housing temperature in °C at frame capturing time.</returns>
  public float getTemperatureBox() {
    float ret = otcsdkPINVOKE.FrameMetadata_getTemperatureBox(swigCPtr);
    return ret;
  }

  /// <summary>Returns the sensor chip temperature in °C at frame capturing time.</summary>
  /// <returns>sensor chip temperature in °C at frame capturing time.</returns>
  public float getTemperatureChip() {
    float ret = otcsdkPINVOKE.FrameMetadata_getTemperatureChip(swigCPtr);
    return ret;
  }

  /// <summary>Set the flag, box and chip temperatures in °C.</summary>
  /// <param name="flag"> temperature in °C.</param> 
  /// <param name="box">  temperature in °C.</param> 
  /// <param name="chip"> temperature in °C.</param>
  public void setTemperatures(float flag, float box, float chip) {
    otcsdkPINVOKE.FrameMetadata_setTemperatures(swigCPtr, flag, box, chip);
  }

  /// <summary>Returns the digital input value on the given PIF channel.</summary>
  /// <param name="channel"> number for which the input value is desired.</param> 
  /// <returns>digital input value on the given PIF channel.</returns> 
  /// <exception cref="SDKException"> if channel number is out of bounds.</exception>
  public bool getPifDigitalInputValue(int channel) {
    bool ret = otcsdkPINVOKE.FrameMetadata_getPifDigitalInputValue(swigCPtr, channel);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>Returns the analog input value on the given PIF channel.</summary>
  /// <param name="channel"> number for which the input value is desired.</param> 
  /// <returns>analog input value on the given PIF channel.</returns> 
  /// <exception cref="SDKException"> if channel number is out of bounds.</exception>
  public float getPifAnalogInputValue(int channel) {
    float ret = otcsdkPINVOKE.FrameMetadata_getPifAnalogInputValue(swigCPtr, channel);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>Returns the count of digital PIF input channel count.</summary>
  /// <returns>count of digital PIF input channel count.</returns>
  public int getPifDigitalInputChannelCount() {
    int ret = otcsdkPINVOKE.FrameMetadata_getPifDigitalInputChannelCount(swigCPtr);
    return ret;
  }

  /// <summary>Returns the count of analog PIF input channel count.</summary>
  /// <returns>count of analog PIF input channel count.</returns>
  public int getPifAnalogInputChannelCount() {
    int ret = otcsdkPINVOKE.FrameMetadata_getPifAnalogInputChannelCount(swigCPtr);
    return ret;
  }

  /// <summary>Sets the counts of the PIF input channels.</summary>
  /// <param name="digital"> input channel count.</param> 
  /// <param name="analog">  input channel count.</param>
  public void setPifInputChannelCounts(int digital, int analog) {
    otcsdkPINVOKE.FrameMetadata_setPifInputChannelCounts(swigCPtr, digital, analog);
  }

  /// <summary>Sets the value of the specified PIF digital input channel.</summary>
  /// <param name="channel"> digital input channel.</param> 
  /// <param name="value">   to set.</param> 
  /// <exception cref="SDKException"> if channel number is out of bounds.</exception>
  public void setPifDigitalInputValue(int channel, bool value) {
    otcsdkPINVOKE.FrameMetadata_setPifDigitalInputValue(swigCPtr, channel, value);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>Sets the value of the specified PIF analog input channel.</summary>
  /// <param name="channel"> analog input channel.</param> 
  /// <param name="value">   to set.</param> 
  /// <exception cref="SDKException"> if channel number is out of bounds.</exception>
  public void setPifAnalogInputValue(int channel, float value) {
    otcsdkPINVOKE.FrameMetadata_setPifAnalogInputValue(swigCPtr, channel, value);
    if (otcsdkPINVOKE.SWIGPendingException.Pending) throw otcsdkPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>Returns a complete copy of this metadata.</summary>
  /// <returns>a complete copy of this metadata.</returns>
  public FrameMetadata clone() {
    FrameMetadata ret = new FrameMetadata(otcsdkPINVOKE.FrameMetadata_clone(swigCPtr), true);
    return ret;
  }

}

}
