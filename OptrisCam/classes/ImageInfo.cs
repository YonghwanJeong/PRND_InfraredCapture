//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Optris.OtcSDK {
///  Encapsulates all relevant information about a false color image.

public class ImageInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ImageInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ImageInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ImageInfo obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ImageInfo() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otcsdkPINVOKE.delete_ImageInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  /// <summary>Constructor.</summary>
  /// <param name="colorFormat">    of the image.</param> 
  /// <param name="widthAlignment"> of the image.</param>
  public ImageInfo(ColorFormat colorFormat, WidthAlignment widthAlignment) : this(otcsdkPINVOKE.new_ImageInfo((int)colorFormat, (int)widthAlignment), true) {
  }

  /// <summary>Returns the color format of the image.</summary>
  /// <returns>color format of the image.</returns>
  public ColorFormat getColorFormat() {
    ColorFormat ret = (ColorFormat)otcsdkPINVOKE.ImageInfo_getColorFormat(swigCPtr);
    return ret;
  }

  /// <summary>Returns the number of color channels.</summary>
  /// <returns>number of color channels.</returns>
  public int getChannels() {
    int ret = otcsdkPINVOKE.ImageInfo_getChannels(swigCPtr);
    return ret;
  }

  /// <summary>Returns the offset of the red color byte.</summary>
  /// <returns>offset of the red color byte.</returns>
  public int getOffsetRed() {
    int ret = otcsdkPINVOKE.ImageInfo_getOffsetRed(swigCPtr);
    return ret;
  }

  /// <summary>Returns the offset of the green color byte.</summary>
  /// <returns>offset of the green color byte.</returns>
  public int getOffsetGreen() {
    int ret = otcsdkPINVOKE.ImageInfo_getOffsetGreen(swigCPtr);
    return ret;
  }

  /// <summary>Returns the offset of the blue color byte.</summary>
  /// <returns>offset of the blue color byte.</returns>
  public int getOffsetBlue() {
    int ret = otcsdkPINVOKE.ImageInfo_getOffsetBlue(swigCPtr);
    return ret;
  }

  /// <summary>Resizes the image to the given dimension.</summary>
  /// <returns>resulting image size in bytes.</returns>
  public int resize(int width, int height) {
    int ret = otcsdkPINVOKE.ImageInfo_resize(swigCPtr, width, height);
    return ret;
  }

  /// <summary>Returns the image width in pixels.</summary>
  /// <returns>image width in pixels.</returns>
  public int getWidth() {
    int ret = otcsdkPINVOKE.ImageInfo_getWidth(swigCPtr);
    return ret;
  }

  /// <summary>Returns the image stride in bytes.</summary>
  /// The stride is the image width in bytes including potential padding.
  /// <returns>image stride in bytes.</returns>
  public int getStride() {
    int ret = otcsdkPINVOKE.ImageInfo_getStride(swigCPtr);
    return ret;
  }

  /// <summary>Returns the image height in pixels.</summary>
  /// <returns>image height in pixels.</returns>
  public int getHeight() {
    int ret = otcsdkPINVOKE.ImageInfo_getHeight(swigCPtr);
    return ret;
  }

  /// <summary>Returns the image size in pixels.</summary>
  /// <returns>image size in pixels.</returns>
  public int getSize() {
    int ret = otcsdkPINVOKE.ImageInfo_getSize(swigCPtr);
    return ret;
  }

  /// <summary>Returns the width alignment of the image.</summary>
  /// <returns>width alignment of the image.</returns>
  public WidthAlignment getWidthAlignment() {
    WidthAlignment ret = (WidthAlignment)otcsdkPINVOKE.ImageInfo_getWidthAlignment(swigCPtr);
    return ret;
  }

  /// <summary>Returns width padding in bytes.</summary>
  /// <returns>width padding in bytes.</returns>
  public int getWidthPaddingInBytes() {
    int ret = otcsdkPINVOKE.ImageInfo_getWidthPaddingInBytes(swigCPtr);
    return ret;
  }

}

}
