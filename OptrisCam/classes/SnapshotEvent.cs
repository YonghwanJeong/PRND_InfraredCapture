//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Optris.OtcSDK {
///  Encapsulates data about a snapshot event.

public class SnapshotEvent : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SnapshotEvent(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SnapshotEvent obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SnapshotEvent obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~SnapshotEvent() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otcsdkPINVOKE.delete_SnapshotEvent(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  ///  Constructor.
  public SnapshotEvent() : this(otcsdkPINVOKE.new_SnapshotEvent__SWIG_0(), true) {
  }

  /// <summary>Constructor.</summary>
  /// <param name="trigger"> input trigger that created the snapshot event.</param> 
  /// <param name="channel"> on which the trigger occurred.</param> 
  /// <param name="type">    of the snapshot event.</param>
  public SnapshotEvent(SnapshotTrigger trigger, byte channel, SnapshotType type) : this(otcsdkPINVOKE.new_SnapshotEvent__SWIG_1((int)trigger, channel, (int)type), true) {
  }

  ///  Input trigger type of the snapshot event.
  public SnapshotTrigger trigger {
    set {
      otcsdkPINVOKE.SnapshotEvent_trigger_set(swigCPtr, (int)value);
    } 
    get {
      SnapshotTrigger ret = (SnapshotTrigger)otcsdkPINVOKE.SnapshotEvent_trigger_get(swigCPtr);
      return ret;
    } 
  }

  ///  Analog or digital input channel of the snapshot event.
  public byte channel {
    set {
      otcsdkPINVOKE.SnapshotEvent_channel_set(swigCPtr, value);
    } 
    get {
      byte ret = otcsdkPINVOKE.SnapshotEvent_channel_get(swigCPtr);
      return ret;
    } 
  }

  ///  Type of the snapshot event.
  public SnapshotType type {
    set {
      otcsdkPINVOKE.SnapshotEvent_type_set(swigCPtr, (int)value);
    } 
    get {
      SnapshotType ret = (SnapshotType)otcsdkPINVOKE.SnapshotEvent_type_get(swigCPtr);
      return ret;
    } 
  }

}

}
